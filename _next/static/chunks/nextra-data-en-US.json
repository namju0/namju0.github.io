{"/":{"title":"About","data":{"":"Computer Science 학사 및 석사이며 현재 은행에 재직중입니다.은행 재직 중 Data Science 석사 학위를 추가로 취득하였으며 LLM의 응용에 관심이 많습니다.Ordinary user 관점에서의 생성형 AI(ChatGPT 등) prompting을 최근 공부하고 있습니다.Python, JavaScript를 활용한 구현을 즐기며,Vim, tmux 등 tool에도 흥미를 많이 느낍니다."}},"/posts":{"title":"Posts","data":{}},"/posts/how-to-deploy-nextjs-blog-on-github-pages":{"title":"Next.js 블로그를 GitHub Pages에 배포하는 방법 (Blog Boilerplate 사용)","data":{"nextjs-블로그를-github-pages에-배포하는-방법-blog-boilerplate-사용#Next.js 블로그를 GitHub Pages에 배포하는 방법 (Blog Boilerplate 사용)":"Next.js Blog Boilerplate를 사용해 생성한 정적 블로그를 GitHub Pages에 배포하는 과정입니다. React 등 기타 요소를 깊숙히 다루지 않고도 간단하고 깔끔한 정적 블로그를 간편하게 제작할 수 있는 방법을 소개합니다.","1-nextjs-blog-boilerplate-클론#1. Next.js Blog Boilerplate 클론":"","1-1-프로젝트-클론#1-1. 프로젝트 클론":"먼저 Next.js Blog Boilerplate를 로컬에 클론합니다:\ngit clone <https://github.com/vercel/next.js.git>\ncd next.js/examples/blog","1-2-패키지-설치#1-2. 패키지 설치":"클론한 디렉토리에서 패키지를 설치합니다:\nnpm install","1-3-로컬-서버-실행#1-3. 로컬 서버 실행":"다음 명령어로 로컬 개발 서버를 실행합니다:\nnpm run dev\n브라우저에서 http://localhost:3000에 접속해 블로그가 정상적으로 보이는지 확인하세요.","2-git-리포지토리-설정#2. Git 리포지토리 설정":"이제 프로젝트를 GitHub 리포지토리에 배포할 수 있도록 Git 리포지토리를 설정합니다.","2-1-git-리포지토리-생성#2-1. Git 리포지토리 생성":"GitHub에서 <your-github-username>.github.io 라는 리포지토리를 생성합니다. 생성 시 ‘Initialize this repository with:’ 설정에서 ‘Add a README file’을 체크하여 리포지토리 생성과 동시에 초기화를 합니다.","2-2-github-리포지토리-연결#2-2. GitHub 리포지토리 연결":"로컬 프로젝트는 현재 https://github.com/vercel/next.js.git 와 연결되어 있습니다. 로컬 프로젝트를 새로 생성한 GitHub 리포지토리와 연결합니다:\ngit remote set-url origin https://github.com/<your-github-username>/<your-github-username>.github.io.git","3-github-pages-배포-준비#3. GitHub Pages 배포 준비":"GitHub Pages에 블로그를 배포하기 위한 몇 가지 추가 설정이 필요합니다.","3-1-gh-pages-패키지-설치#3-1. gh-pages 패키지 설치":"GitHub Pages에 배포하려면 gh-pages 패키지를 설치해야 합니다:\nnpm install gh-pages --save-dev","3-2-nextconfigjs-설정#3-2. next.config.js 설정":"GitHub Pages에서는 리포지토리 이름을 기반으로 경로를 설정해야 합니다. 프로젝트 루트에 있는**next.config.js** 파일을 열어, nextConfig에 다음 내용을 추가 작성합니다:\nconst nextConfig = {\n  // ... 전략 ...\n  output: 'export',\n  images: {\n    unoptimized: true\n  }\n  // ... 후략 ...\n};","3-3-packagejson-수정#3-3. package.json 수정":"package.json 파일에 배포를 위한 스크립트를 추가합니다. scripts 섹션을 아래처럼 작성하세요:\n{\n  \"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"node ./scripts/gen-rss.js && next build\",\n    \"start\": \"next start\",\n    \"deploy\": \"touch out/.nojekyll && gh-pages -d out --dotfiles\"\n  }\n}\n이 스크립트는 npm run build로 out 디렉토리를 생성하고 npm run deploy로 그 디렉토리를 GitHub 리포지토리에 배포할 수 있게 해 줍니다.","4-github-pages-설정-및-배포#4. GitHub Pages 설정 및 배포":"","4-1-github-pages-설정#4-1. GitHub Pages 설정":"GitHub 리포지토리의 Settings > Pages 섹션으로 이동합니다. 배포할 브랜치를 gh-pages로 설정하고, 저장합니다. 그러면 GitHub Pages에서 블로그를 배포할 준비가 완료됩니다.","4-2-블로그-배포#4-2. 블로그 배포":"이제 블로그를 빌드합니다.\nnpm run build\n이 명령어를 실행하면 블로그가 out 디렉토리에 생성됩니다.이를 GitHub Pages에 배포합니다:\nnpm run deploy\n이 명령어를 실행하면 블로그가 gh-pages 브랜치에 푸시되고 GitHub Pages에 배포됩니다.","4-3-배포된-블로그-확인#4-3. 배포된 블로그 확인":"배포가 완료되면 브라우저에서 https://<your-github-username>.github.io로 접속하여 블로그가 정상적으로 배포되었는지 확인합니다.","5-새로운-포스트-작성-markdown-사용#5. 새로운 포스트 작성 (Markdown 사용)":"이제 블로그에 새로운 포스트를 추가하는 방법을 설명합니다. Markdown 파일을 사용해 쉽게 포스트를 작성할 수 있습니다.","5-1-markdown-파일-생성#5-1. Markdown 파일 생성":"pages/posts 폴더에 새로운 Markdown 파일을 추가합니다. 예를 들어, test.md 파일을 다음과 같이 작성할 수 있습니다:\n---\ntitle: Test Article\ndate: 2024/9/20\ndescription: It is a test article.\ntag: test\nauthor: You\n---\nIt is a test article.\nIt is only for test purpose.","5-2-포스트-빌드-및-배포#5-2. 포스트 빌드 및 배포":"Markdown 파일을 추가한 후, 다시 블로그를 빌드하고 배포합니다:\nnpm run build\nnpm run deploy\n이제 새로운 포스트가 블로그에 추가된 것을 확인할 수 있습니다.","6-사이트맵#6. 사이트맵":"npm run build 수행 시마다 정적 사이트맵 파일(sitemap.xml)을 갱신 및 생성하게 하는 방법입니다.","6-1-next-sitemap--패키지-설치#6-1. next-sitemap  패키지 설치":"npm install next-sitemap","6-2-next-sitemapconfigjs-설정#6-2. next-sitemap.config.js 설정":"프로젝트 루트에 next-sitemap.config.js 파일을 다음과 같이 생성합니다:\n/** @type {import('next-sitemap').IConfig} */\nmodule.exports = {\n  siteUrl: process.env.SITE_URL || 'https://<your-github-username>.github.io',\n  generateRobotsTxt: true,\n  generateIndexSitemap: false,\n}","6-3-packagejson-수정#6-3. package.json 수정":"package.json 파일에 사이트맵 생성을 위한 스크립트를 추가합니다. scripts 섹션에  postbuild를 아래처럼 추가하세요:\n{\n  \"scripts\": {\n    // ... 전략 ...\n    \"postbuild\": \"next-sitemap\",\n    // ... 후략 ...\n  }\n}","결론#결론":"Next.js Blog Boilerplate를 사용해 GitHub Pages에 블로그를 배포하는 방법을 알아보았습니다. Boilerplate의 적용, GitHub 리포지토리 생성 및 Git 설정, Next.js 설정, Markdown 포스트 작성, 사이트맵 생성에 이르는 방법을 Step-by-Step 설명하였고, 차근차근 따라하면 손쉽게 정적 블로그를 만들어 볼 수 있게 내용을 구성해 보았습니다."}},"/posts/vim-command-line-paste-guide":{"title":"Vim에서 클립보드 내용을 명령줄에 붙여넣는 방법","data":{"":"Vim을 사용할 때, 클립보드 내용을 명령줄에 붙여넣어야 할 상황이 자주 발생합니다. :w 로 파일을 저장할 때 정해진 경로에 파일을 생성하려면 경로를 클립보드에 복사해 붙여 넣어야 하는 일이 많습니다.가령, :w C:\\*Program Files (x86)\\...\\output.txt와 같은 명령을 명령줄에 입력해야 할 때를 떠올릴 수 있습니다.다음과 같이 하면 Vim 편집기의 내용을 복사(yank)하여 Vim 명령줄에 붙여넣을 수 있습니다. 이렇게 함으로써 복잡한 텍스트가 필요한 명령어를 편리하게 쓸 수 있습니다. 물론 Vim 외부의 텍스트를 명령줄에 바로 복사, 붙여넣기할 수는 없지만 외부 텍스트를 Vim 편집기에 한번 붙여 넣은 후 yank해 동일한 효과를 낼 수 있습니다.","방법#방법:":"텍스트를 먼저 복사(yank)합니다. 가령, yy로 원하는 부분을 행복사합니다.\n: 키를 눌러 명령 모드로 진입합니다.\nCtrl-R을 누른 후, \"을 입력하여 기본 레지스터의 내용을 붙여넣습니다.\n참고로 기본 레지스터(yy 로 yank 시 복사되는 곳)외 다른 Vim 레지스터에 대해서도 위 방법을 적용할 수 있습니다. 예를 들어, \"ayy 로 행복사를 레지스터 a에 하고 명령줄에서 Ctrl-R을 누른 후 \"  대신 a 를 입력하면 됩니다."}},"/tags/[tag]":{"title":"Tagged Posts","data":{}}}